#!/bin/bash

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
APP_DIR="$HOME/nix2/news_informer2"
ENV_DIR="$APP_DIR/venv"
PY_SCRIPT="$APP_DIR/news_informer2.py"
LOG_FILE="$APP_DIR/informer.log"
SERVICE_DIR="$HOME/.config/systemd/user"
SERVICE_FILE="$SERVICE_DIR/news_informer.service"

echo "‚ñ∂Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ $APP_DIR"
mkdir -p "$APP_DIR"
mkdir -p "$SERVICE_DIR"

echo "üêç –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
python3 -m venv "$ENV_DIR"
source "$ENV_DIR/bin/activate"

echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install --upgrade pip
pip install requests feedparser

echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ Python-—Å–∫—Ä–∏–ø—Ç–∞: $PY_SCRIPT"
cat <<'EOF' > "$PY_SCRIPT"
import requests
import feedparser
from datetime import datetime
import time
import threading
import random
from requests.utils import quote
import logging
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('news_informer.log'),
        logging.StreamHandler()
    ]
)

# –†–∞–∑–Ω—ã–µ RSS-–ª–µ–Ω—Ç—ã TASS
RSS_URLS = [
    "https://tass.ru/rss/v2.xml",           # –û—Å–Ω–æ–≤–Ω–∞—è –ª–µ–Ω—Ç–∞ (–≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏)
    "https://tass.ru/rss/news.xml",         # –ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    "https://tass.ru/rss/economy.xml",      # –≠–∫–æ–Ω–æ–º–∏–∫–∞
    "https://tass.ru/rss/politics.xml",     # –ü–æ–ª–∏—Ç–∏–∫–∞
    "https://tass.ru/rss/society.xml",      # –û–±—â–µ—Å—Ç–≤–æ
    "https://tass.ru/rss/incidents.xml",    # –ü—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è
    "https://tass.ru/rss/culture.xml",      # –ö—É–ª—å—Ç—É—Ä–∞
    "https://tass.ru/rss/defense.xml",      # –û–±–æ—Ä–æ–Ω–∞
    "https://tass.ru/rss/science.xml",      # –ù–∞—É–∫–∞
    "https://tass.ru/rss/sport.xml",        # –°–ø–æ—Ä—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
]

ESP32_IP = "1.1.1.235"

class NewsInformer:
    def __init__(self):
        self.running = True
        self.news_list = []
        self.sent_news = set()
        self.current_rss_index = 0
        self.start_auto_parse()
        self.start_auto_send()
        logging.info("NewsInformer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def clean_text(self, text):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
        if not text:
            return ""
        text = re.sub('<[^<]+?>', '', text)
        text = re.sub('\s+', ' ', text)
        return text.strip()

    def get_current_rss_url(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π RSS-—Å—Å—ã–ª–∫–∏ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
        return RSS_URLS[self.current_rss_index]

    def parse_news(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ RSS-–ª–µ–Ω—Ç—ã TASS —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            current_url = self.get_current_rss_url()
            logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ RSS: {current_url}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/rss+xml, text/xml, application/xml'
            }
            
            feed = feedparser.parse(current_url)
            
            if feed.bozo:
                logging.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {feed.bozo_exception}")

            if not feed.entries:
                logging.warning("–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ RSS-–ª–µ–Ω—Ç–µ")
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é RSS-–ª–µ–Ω—Ç—É
                self.current_rss_index = (self.current_rss_index + 1) % len(RSS_URLS)
                return

            new_news = []
            for entry in feed.entries[:20]:  # –ë–µ—Ä–µ–º –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π
                try:
                    title = self.clean_text(entry.get('title', ''))
                    if not title:
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∏—Å—Ç–æ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º —Ç–æ–ª—å–∫–æ —Å–ø–æ—Ä—Ç
                    if any(word in title.lower() for word in ['—Ñ—É—Ç–±–æ–ª', '—Ö–æ–∫–∫–µ–π', '—Å–ø–æ—Ä—Ç', '–º–∞—Ç—á', '—á–µ–º–ø–∏–æ–Ω–∞—Ç']):
                        continue
                    
                    link = entry.get('link', '')
                    
                    description = ""
                    if hasattr(entry, 'summary'):
                        description = self.clean_text(entry.summary)
                    elif hasattr(entry, 'description'):
                        description = self.clean_text(entry.description)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                    source = "TASS"
                    if "economy" in current_url:
                        source = "–¢–ê–°–°-–≠–∫–æ–Ω–æ–º–∏–∫–∞"
                    elif "politics" in current_url:
                        source = "–¢–ê–°–°-–ü–æ–ª–∏—Ç–∏–∫–∞"
                    elif "society" in current_url:
                        source = "–¢–ê–°–°-–û–±—â–µ—Å—Ç–≤–æ"
                    
                    new_news.append((title, link, description, source))
                    
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
                    continue

            if new_news:
                self.news_list = new_news
                logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(self.news_list)} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {current_url}")
                
                # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é RSS-–ª–µ–Ω—Ç—É –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
                self.current_rss_index = (self.current_rss_index + 1) % len(RSS_URLS)
                
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ —Ç–æ–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º RSS
            self.current_rss_index = (self.current_rss_index + 1) % len(RSS_URLS)

    def send_to_esp32(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ ESP32 —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            clean_message = re.sub(r'[^\w\s–∞-—è–ê-–Ø—ë–Å.,!?-]', '', message)
            encoded_message = quote(clean_message)
            
            url = f"http://{ESP32_IP}/api?mes={encoded_message}"
            
            response = requests.get(url, timeout=3)
            
            if response.status_code == 200:
                logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {clean_message[:50]}...")
                return True
            else:
                logging.warning(f"–û—à–∏–±–∫–∞ HTTP {response.status_code}")
                return False
                
        except requests.exceptions.Timeout:
            logging.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ ESP32")
            return False
        except requests.exceptions.ConnectionError:
            logging.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ESP32. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ IP –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
            return False
        except Exception as e:
            logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return False

    def auto_parse(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç"""
        while self.running:
            self.parse_news()
            for _ in range(900):  # 15 –º–∏–Ω—É—Ç
                if not self.running:
                    break
                time.sleep(1)

    def auto_send(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥"""
        while self.running:
            if self.news_list:
                available_news = [news for news in self.news_list if news[0] not in self.sent_news]
                
                if not available_news:
                    self.sent_news.clear()
                    available_news = self.news_list
                
                if available_news:
                    title, link, description, source = random.choice(available_news)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
                    if len(title) <= 90:
                        message = f"{source}: {title}"
                    else:
                        message = title[:100] + "..."
                    
                    if self.send_to_esp32(message):
                        self.sent_news.add(title)
            
            for _ in range(45):  # 45 —Å–µ–∫—É–Ω–¥
                if not self.running:
                    break
                time.sleep(1)

    def start_auto_parse(self):
        thread = threading.Thread(target=self.auto_parse, daemon=True)
        thread.start()
        logging.info("–ó–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥")

    def start_auto_send(self):
        thread = threading.Thread(target=self.auto_send, daemon=True)
        thread.start()
        logging.info("–ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")

    def stop(self):
        self.running = False
        logging.info("NewsInformer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    try:
        informer = NewsInformer()
        logging.info("–°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        while informer.running:
            time.sleep(0.1)
            
    except KeyboardInterrupt:
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
    finally:
        if 'informer' in locals():
            informer.stop()
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
EOF

echo "üßæ –°–æ–∑–¥–∞–Ω–∏–µ systemd user-—Å–µ—Ä–≤–∏—Å–∞: $SERVICE_FILE"
cat <<EOF > "$SERVICE_FILE"
[Unit]
Description=User News Informer Service
After=network.target

[Service]
Type=simple
WorkingDirectory=$APP_DIR
ExecStart=$ENV_DIR/bin/python $PY_SCRIPT
StandardOutput=append:$LOG_FILE
StandardError=append:$LOG_FILE
Restart=always
RestartSec=10

[Install]
WantedBy=default.target
EOF

echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ systemd user-—Å–µ—Ä–≤–∏—Å–∞..."
systemctl --user daemon-reload
systemctl --user enable news_informer.service
systemctl --user restart news_informer.service

echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–µ–Ω."
echo "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞: journalctl --user -u news_informer.service -f"
echo "üìÅ –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: tail -f $APP_DIR/news_informer.log"

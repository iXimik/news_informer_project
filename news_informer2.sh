#!/bin/bash

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
APP_DIR="$HOME/nix2/news_informer2"
ENV_DIR="$APP_DIR/venv"
PY_SCRIPT="$APP_DIR/news_informer2.py"
LOG_FILE="$APP_DIR/informer.log"
SERVICE_DIR="$HOME/.config/systemd/user"
SERVICE_FILE="$SERVICE_DIR/news_informer.service"

echo "‚ñ∂Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ $APP_DIR"
mkdir -p "$APP_DIR"
mkdir -p "$SERVICE_DIR"

echo "üêç –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
python3 -m venv "$ENV_DIR"
source "$ENV_DIR/bin/activate"

echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install --upgrade pip
pip install requests feedparser beautifulsoup4

echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ Python-—Å–∫—Ä–∏–ø—Ç–∞: $PY_SCRIPT"
cat <<'EOF' > "$PY_SCRIPT"
import requests
import feedparser
from datetime import datetime
import time
import threading
import random
from requests.utils import quote
import logging
import re
from bs4 import BeautifulSoup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('news_informer.log'),
        logging.StreamHandler()
    ]
)

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ RSS-–ª–µ–Ω—Ç –º–∏—Ä–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç—Å—Ç–≤
RSS_SOURCES = [
    # –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    {"url": "https://tass.ru/rss/v2.xml", "name": "–¢–ê–°–°", "lang": "ru"},
    {"url": "https://ria.ru/export/rss2/index.xml", "name": "–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏", "lang": "ru"},
    {"url": "https://www.vesti.ru/vesti.rss", "name": "–í–µ—Å—Ç–∏", "lang": "ru"},
    {"url": "https://lenta.ru/rss", "name": "–õ–µ–Ω—Ç–∞.—Ä—É", "lang": "ru"},
    {"url": "https://www.interfax.ru/rss.asp", "name": "–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å", "lang": "ru"},
    {"url": "https://www.kommersant.ru/RSS/news.xml", "name": "–ö–æ–º–º–µ—Ä—Å–∞–Ω—Ç", "lang": "ru"},
    {"url": "https://rg.ru/rss/", "name": "–†–æ—Å—Å–∏–π—Å–∫–∞—è –≥–∞–∑–µ—Ç–∞", "lang": "ru"},
    {"url": "https://www.gazeta.ru/export/rss/lenta.xml", "name": "–ì–∞–∑–µ—Ç–∞.ru", "lang": "ru"},
    
    # –ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–µ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    {"url": "https://rss.cnn.com/rss/edition.rss", "name": "CNN", "lang": "en"},
    {"url": "https://feeds.bbci.co.uk/news/rss.xml", "name": "BBC News", "lang": "en"},
    {"url": "https://www.reutersagency.com/feed/?taxonomy=best-topics&post_type=best", "name": "Reuters", "lang": "en"},
    {"url": "https://www.cgtn.com/rss/news", "name": "CGTN", "lang": "en"},
    {"url": "https://www.aljazeera.com/xml/rss/all.xml", "name": "Al Jazeera", "lang": "en"},
    {"url": "https://www.bloomberg.com/feed/podcast/etf-report.xml", "name": "Bloomberg", "lang": "en"},
    {"url": "https://www.theguardian.com/world/rss", "name": "The Guardian", "lang": "en"},
    {"url": "https://www.nytimes.com/services/xml/rss/nyt/World.xml", "name": "New York Times", "lang": "en"},
    
    # –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
    {"url": "https://www.dw.com/rdf/rss-en-all", "name": "Deutsche Welle", "lang": "en"},
    {"url": "https://www.france24.com/en/rss", "name": "France 24", "lang": "en"},
    {"url": "https://www.euronews.com/rss", "name": "Euronews", "lang": "en"},
]

ESP32_IP = "1.1.1.235"

class NewsInformer:
    def __init__(self):
        self.running = True
        self.news_list = []
        self.sent_news = set()
        self.current_source_index = 0
        self.start_auto_parse()
        self.start_auto_send()
        logging.info("NewsInformer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")

    def clean_text(self, text):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML —Ç–µ–≥–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤"""
        if not text:
            return ""
        text = re.sub('<[^<]+?>', '', text)
        text = re.sub('\s+', ' ', text)
        text = re.sub(r'[^\w\s–∞-—è–ê-–Ø—ë–Åa-zA-Z.,!?\-:;]', '', text)
        return text.strip()

    def translate_simple(self, text, source_lang):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π"""
        if source_lang != 'en':
            return text
            
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
        translations = {
            'war': '–≤–æ–π–Ω–∞', 'crisis': '–∫—Ä–∏–∑–∏—Å', 'economy': '—ç–∫–æ–Ω–æ–º–∏–∫–∞',
            'president': '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', 'government': '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
            'attack': '–∞—Ç–∞–∫–∞', 'meeting': '–≤—Å—Ç—Ä–µ—á–∞', 'agreement': '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ',
            'sanctions': '—Å–∞–Ω–∫—Ü–∏–∏', 'election': '–≤—ã–±–æ—Ä—ã', 'protest': '–ø—Ä–æ—Ç–µ—Å—Ç',
            'climate': '–∫–ª–∏–º–∞—Ç', 'technology': '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', 'health': '–∑–¥–æ—Ä–æ–≤—å–µ',
            'energy': '—ç–Ω–µ—Ä–≥–∏—è', 'security': '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', 'development': '—Ä–∞–∑–≤–∏—Ç–∏–µ'
        }
        
        for eng, rus in translations.items():
            text = re.sub(rf'\b{eng}\b', rus, text, flags=re.IGNORECASE)
        
        return text

    def parse_news(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            source = RSS_SOURCES[self.current_source_index]
            logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥: {source['name']} - {source['url']}")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/rss+xml, text/xml, application/xml, */*'
            }
            
            try:
                response = requests.get(source['url'], headers=headers, timeout=10)
                response.encoding = 'utf-8'
                feed = feedparser.parse(response.content)
            except:
                feed = feedparser.parse(source['url'])
            
            if feed.bozo and feed.bozo_exception:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {source['name']}: {feed.bozo_exception}")

            if not feed.entries:
                logging.warning(f"–ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ {source['name']}")
                self.current_source_index = (self.current_source_index + 1) % len(RSS_SOURCES)
                return

            new_news = []
            for entry in feed.entries[:15]:
                try:
                    title = self.clean_text(entry.get('title', ''))
                    if not title or len(title) < 10:
                        continue
                    
                    # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥
                    if source['lang'] == 'en':
                        title = self.translate_simple(title, 'en')
                    
                    link = entry.get('link', '')
                    if not link and hasattr(entry, 'links'):
                        for link_obj in entry.links:
                            if link_obj.rel == 'alternate':
                                link = link_obj.href
                                break
                    
                    description = ""
                    if hasattr(entry, 'summary'):
                        description = self.clean_text(entry.summary)
                    elif hasattr(entry, 'description'):
                        description = self.clean_text(entry.description)
                    elif hasattr(entry, 'content'):
                        if entry.content:
                            description = self.clean_text(entry.content[0].value)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ —è–∑—ã–∫
                    news_item = {
                        'title': title,
                        'link': link,
                        'description': description,
                        'source': source['name'],
                        'lang': source['lang']
                    }
                    
                    new_news.append(news_item)
                    
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {source['name']}: {e}")
                    continue

            if new_news:
                self.news_list.extend(new_news)
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —á—Ç–æ–±—ã –Ω–µ –∑–∞–Ω–∏–º–∞—Ç—å –º–Ω–æ–≥–æ –ø–∞–º—è—Ç–∏
                self.news_list = self.news_list[-100:]
                logging.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_news)} –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç {source['name']}. –í—Å–µ–≥–æ: {len(self.news_list)}")
                
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫
            self.current_source_index = (self.current_source_index + 1) % len(RSS_SOURCES)
                
        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
            self.current_source_index = (self.current_source_index + 1) % len(RSS_SOURCES)

    def send_to_esp32(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ ESP32"""
        try:
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            clean_message = re.sub(r'[^\w\s–∞-—è–ê-–Ø—ë–Åa-zA-Z.,!?\-:;]', '', message)
            encoded_message = quote(clean_message)
            
            url = f"http://{ESP32_IP}/api?mes={encoded_message}"
            
            response = requests.get(url, timeout=5)
            
            if response.status_code == 200:
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {clean_message[:60]}...")
                return True
            else:
                logging.warning(f"–û—à–∏–±–∫–∞ HTTP {response.status_code}")
                return False
                
        except requests.exceptions.Timeout:
            logging.warning("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ ESP32")
            return False
        except requests.exceptions.ConnectionError:
            logging.error("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ESP32")
            return False
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return False

    def auto_parse(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
        while self.running:
            self.parse_news()
            for _ in range(600):  # 10 –º–∏–Ω—É—Ç
                if not self.running:
                    break
                time.sleep(1)

    def auto_send(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∫–∞–∂–¥—ã–µ 45 —Å–µ–∫—É–Ω–¥"""
        while self.running:
            if self.news_list:
                available_news = [news for news in self.news_list if news['title'] not in self.sent_news]
                
                if not available_news:
                    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã
                    self.sent_news.clear()
                    available_news = self.news_list
                
                if available_news:
                    news_item = random.choice(available_news)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                    if news_item['lang'] == 'en':
                        source_prefix = "[INT] "
                    else:
                        source_prefix = "[RU] "
                    
                    message = f"{source_prefix}{news_item['title']}"
                    
                    # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                    if len(message) > 200:
                        message = message[:197] + "..."
                    
                    if self.send_to_esp32(message):
                        self.sent_news.add(news_item['title'])
            
            for _ in range(45):  # 45 —Å–µ–∫—É–Ω–¥
                if not self.running:
                    break
                time.sleep(1)

    def start_auto_parse(self):
        thread = threading.Thread(target=self.auto_parse, daemon=True)
        thread.start()
        logging.info("–ó–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥")

    def start_auto_send(self):
        thread = threading.Thread(target=self.auto_send, daemon=True)
        thread.start()
        logging.info("–ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞")

    def stop(self):
        self.running = False
        logging.info("NewsInformer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def main():
    try:
        informer = NewsInformer()
        logging.info("–ú—É–ª—å—Ç–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
        logging.info(f"–í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(RSS_SOURCES)}")
        
        while informer.running:
            time.sleep(0.1)
            
    except KeyboardInterrupt:
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if 'informer' in locals():
            informer.stop()
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()
EOF

echo "üßæ –°–æ–∑–¥–∞–Ω–∏–µ systemd user-—Å–µ—Ä–≤–∏—Å–∞: $SERVICE_FILE"
cat <<EOF > "$SERVICE_FILE"
[Unit]
Description=Multi-Source News Informer Service
After=network.target
Wants=network.target

[Service]
Type=simple
WorkingDirectory=$APP_DIR
ExecStart=$ENV_DIR/bin/python $PY_SCRIPT
Environment=PYTHONUNBUFFERED=1
StandardOutput=append:$LOG_FILE
StandardError=append:$LOG_FILE
Restart=always
RestartSec=30

[Install]
WantedBy=default.target
EOF

echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ systemd user-—Å–µ—Ä–≤–∏—Å–∞..."
systemctl --user daemon-reload
systemctl --user enable news_informer.service
systemctl --user restart news_informer.service

echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ú—É–ª—å—Ç–∏-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω."
echo "üìä –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: 20+ (—Ä—É—Å—Å–∫–∏–µ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ)"
echo "üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞: journalctl --user -u news_informer.service -f"
echo "üìÅ –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: tail -f $APP_DIR/news_informer.log"
echo "üåç –ù–æ–≤–æ—Å—Ç–∏ –∏–∑: –¢–ê–°–°, –†–ò–ê, –í–µ—Å—Ç–∏, CNN, BBC, Reuters, CGTN –∏ –º–Ω–æ–≥–∏—Ö –¥—Ä—É–≥–∏—Ö!"
